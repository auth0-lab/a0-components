export const componentCode = {
  "code": "\"use client\";\n\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n\ninterface KeyValueMap {\n  [key: string]: any;\n}\n\ntype PopoverTriggerProps = React.ComponentPropsWithoutRef<\n  typeof PopoverTrigger\n>;\n\ntype Organization = {\n  id: string;\n  name: string;\n  display_name: string;\n  picture: string;\n};\n\n// https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior\nenum OrganizationTypeOfUsers {\n  Deny = \"deny\",\n  Require = \"require\",\n  Allow = \"allow\",\n}\n\ntype SubtitleHandler = string | ((organization: any) => string);\n\ninterface OrganizationSwitcherProps extends PopoverTriggerProps {\n  user: KeyValueMap;\n  availableOrganizations: Organization[];\n  loginUrl?: string;\n  typeOfUsers?: OrganizationTypeOfUsers;\n  subtitle?: SubtitleHandler;\n  showBorder?: boolean;\n  organizationsLabel?: string;\n  personalAccountLabel?: string;\n  addOrganizationLabel?: string;\n  createOrganizationUrl?: string;\n  returnTo?: string;\n}\n\nexport default function OrganizationSwitcher({\n  user,\n  loginUrl = \"/api/auth/login\",\n  typeOfUsers = OrganizationTypeOfUsers.Allow,\n  subtitle,\n  showBorder = true,\n  availableOrganizations,\n  organizationsLabel = \"Organizations\",\n  personalAccountLabel = \"Personal Account\",\n  addOrganizationLabel = \"Add Organization\",\n  createOrganizationUrl,\n  returnTo = \"/\",\n}: OrganizationSwitcherProps) {\n  const groups = [\n    {\n      label: personalAccountLabel,\n      organizations: [\n        {\n          type: \"personal\",\n          label: user.name,\n          value: user.sub,\n          picture: user.picture,\n        },\n      ],\n    },\n    {\n      label: organizationsLabel,\n      organizations: availableOrganizations.map((org: Organization) => ({\n        type: \"organization\",\n        label: org.display_name,\n        value: org.id,\n        picture: org.picture,\n      })) as [],\n    },\n  ];\n\n  if (typeOfUsers === \"require\") {\n    groups.shift();\n  }\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedOrg, setSelectedOrg] = React.useState<\n    (typeof groups)[number][\"organizations\"][number]\n  >(\n    user.org_id\n      ? groups[groups.length - 1].organizations.filter(\n          (org) => org.value === user.org_id\n        )[0]\n      : groups[0].organizations[0]\n  );\n\n  return (\n    typeOfUsers !== OrganizationTypeOfUsers.Deny && (\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            aria-label=\"Select a team\"\n            className={\\`w-full justify-between pr-1 pl-2 \\${\n              !showBorder && \"border-0\"\n            }\\`}\n          >\n            <div className=\"flex flex-col items-start\">\n              <span className=\"text-sm\">{selectedOrg.label}</span>\n              {subtitle && (\n                <span className=\"text-gray-500 font-light text-xs\">\n                  {typeof subtitle === \"string\"\n                    ? subtitle\n                    : subtitle(selectedOrg)}\n                </span>\n              )}\n            </div>\n            <ChevronsUpDown size={14} />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[200px] p-0\">\n          <Command>\n            <CommandList>\n              <CommandInput placeholder=\"Search ...\" />\n              <CommandEmpty>\n                No {organizationsLabel.toLowerCase()} found.\n              </CommandEmpty>\n            </CommandList>\n\n            <CommandList>\n              {groups.map((group) => (\n                <CommandGroup key={group.label} heading={group.label}>\n                  {group.organizations.map(\n                    (org: {\n                      value: string;\n                      label: string;\n                      picture: string;\n                      type: string;\n                    }) => (\n                      <CommandItem\n                        key={org.value}\n                        onSelect={() => {\n                          setSelectedOrg(org);\n                          setOpen(false);\n                        }}\n                        className=\"text-sm\"\n                      >\n                        <a\n                          href={\n                            org.type === \"personal\"\n                              ? \\`\\${loginUrl}?returnTo=\\${returnTo}\\`\n                              : \\`\\${loginUrl}?organization=\\${org.value}&returnTo=\\${returnTo}\\`\n                          }\n                          className=\"flex w-full flex items-center\"\n                        >\n                          {org.label}\n                          {selectedOrg.value === org.value && (\n                            <Check className={\"ml-auto h-4 w-4\"} />\n                          )}\n                        </a>\n                      </CommandItem>\n                    )\n                  )}\n                </CommandGroup>\n              ))}\n            </CommandList>\n\n            {createOrganizationUrl && (\n              <>\n                <CommandSeparator />\n                <CommandList>\n                  <CommandGroup>\n                    <CommandItem>\n                      <a\n                        href={createOrganizationUrl}\n                        className=\"flex items-center justify-between gap-3 w-full block text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\"\n                      >\n                        {addOrganizationLabel}\n                        <div className=\"RightSlot\">+</div>\n                      </a>\n                    </CommandItem>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            )}\n          </Command>\n        </PopoverContent>\n      </Popover>\n    )\n  );\n}\n"
};