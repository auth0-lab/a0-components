export const componentRoutes = [
  {
    "name": "MFA router",
    "description": "Handles list, update and create enrollments.",
    "code": "import { ManagementClient } from \"auth0\";\nimport { NextResponse } from \"next/server\";\n\nimport { getSession, withApiAuthRequired } from \"@auth0/nextjs-auth0\";\n\nconst client = new ManagementClient({\n  domain: new URL(process.env.AUTH0_ISSUER_BASE_URL!).host,\n  clientId: process.env.AUTH0_CLIENT_ID_MGMT!,\n  clientSecret: process.env.AUTH0_CLIENT_SECRET_MGMT!,\n});\n\n/**\n * @example export const GET = handleMFAFactorsList();\n */\nexport function handleMFAFactorsList() {\n  return withApiAuthRequired(\n    async (request: Request): Promise<NextResponse> => {\n      const session = await getSession();\n      const user_id = session?.user.sub;\n      const availableFactors = [\n        \"push-notification\",\n        \"sms\",\n        \"voice\",\n        \"otp\",\n        \"webauthn-roaming\",\n        \"webauthn-platform\",\n      ];\n      const { data: factors } = await client.guardian.getFactors();\n\n      const { data: enrollments } = await client.users.getAuthenticationMethods(\n        { id: user_id }\n      );\n\n      return NextResponse.json(\n        factors\n          .filter((factor: any) => {\n            let factorName: string = factor.name;\n\n            return availableFactors.includes(factorName) && factor.enabled;\n          })\n          .map((factor: any) => {\n            const enrollmentInfo = enrollments.find((enrollment: any) => {\n              let factorName: string = factor.name;\n\n              if (factor.name === \"sms\" || factor.name === \"voice\") {\n                factorName = \"phone\";\n              }\n\n              return enrollment.type.includes(factorName);\n            });\n\n            return {\n              ...factor,\n              enrollmentId: enrollmentInfo?.id,\n            };\n          })\n      );\n    }\n  );\n}\n\n/**\n * @example export const POST = handleMFAFactorEnrollment();\n */\nexport function handleMFAFactorEnrollment() {\n  return withApiAuthRequired(\n    async (request: Request): Promise<NextResponse> => {\n      const session = await getSession();\n      const user_id = session?.user.sub;\n      const { factor }: { factor: string } = await request.json();\n      let factorName: string = factor;\n\n      if (factor === \"sms\" || factor === \"voice\") {\n        factorName = \"phone\";\n      }\n\n      const { data } = await client.guardian.createEnrollmentTicket({\n        user_id,\n        //@ts-ignore\n        factor: factorName,\n        allow_multiple_enrollments: true,\n      });\n\n      return NextResponse.json(data);\n    }\n  );\n}\n\n/**\n * @example export const DELETE = handleMFADeleteEnrollment();\n */\nexport function handleMFADeleteEnrollment() {\n  return withApiAuthRequired(\n    async (request: Request, { params }: any): Promise<NextResponse> => {\n      const session = await getSession();\n      const user_id = session?.user.sub;\n      const { enrollmentId }: { enrollmentId: string } = params;\n\n      await client.users.deleteAuthenticationMethod({\n        id: user_id,\n        authentication_method_id: enrollmentId,\n      });\n\n      return NextResponse.json({ enrollmentId });\n    }\n  );\n}\n"
  }
];