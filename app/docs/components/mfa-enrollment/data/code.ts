export const componentCode = {
  "code": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\n\ntype MfaEnrollment = {\n  name: string;\n  enabled: boolean;\n  enrollmentId?: string;\n};\n\ninterface IPopupWindow {\n  width: number;\n  height: number;\n  title: string;\n  url: string;\n  focus: boolean;\n  scrollbars: boolean;\n}\n\nconst factorsMeta: {\n  [key: string]: any;\n} = {\n  sms: {\n    title: \"Phone Message\",\n    description: \"Users will receive a phone message with a verification code\",\n  },\n  \"push-notification\": {\n    title: \"Push Notification using Auth0 Guardian\",\n    description: \"Provide a push notification using Auth0 Guardian.\",\n  },\n  otp: {\n    title: \"One-time Password\",\n    description:\n      \"Provide a one-time password using Google Authenticator or similar.\",\n  },\n  email: {\n    title: \"Email\",\n    description:\n      \"Users will receive an email message containing a verification code.\",\n  },\n  duo: {\n    title: \"Duo Security\",\n    description: \"Use your DUO account for Multi-factor Authentication.\",\n  },\n  \"webauthn-roaming\": {\n    title: \"WebAuthn with FIDO Security Keys\",\n    description:\n      \"Depending on your browser, you can use WebAuthn-compliant security keys (like FIDO2) as a second factor of authentication.\",\n  },\n  \"webauthn-platform\": {\n    title: \"WebAuthn with FIDO Device Biometrics\",\n    description:\n      \"Depending on your browser, you can use WebAuthn-compliant device biometrics as a second factor of authentication\",\n  },\n  \"recovery-code\": {\n    title: \"Recovery Code\",\n    description:\n      \"Provide a unique code that allows users to regain access to their account.\",\n  },\n};\n\nfunction openPopupWindow(popupOptions: IPopupWindow): Window | null {\n  {\n    const dualScreenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop =\n      window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const width = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n    const height = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const systemZoom = width / window.screen.availWidth;\n    const left = (width - popupOptions.width) / 2 / systemZoom + dualScreenLeft;\n    const top = (height - popupOptions.height) / 2 / systemZoom + dualScreenTop;\n    const newWindow = window.open(\n      popupOptions.url,\n      popupOptions.title,\n      \\`scrollbars=\\${popupOptions.scrollbars ? \"yes\" : \"no\"},\n      width=\\${popupOptions.width / systemZoom}, \n      height=\\${popupOptions.height / systemZoom}, \n      top=\\${top}, \n      left=\\${left}\n      \\`\n    );\n    newWindow!.opener = null;\n    if (popupOptions.focus) {\n      newWindow!.focus();\n    }\n    return newWindow;\n  }\n}\n\nfunction Spinner() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"17\"\n      height=\"17\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"mr-2 animate-spin\"\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\"></path>\n    </svg>\n  );\n}\n\nexport default function MFAEnrollment({\n  factors,\n  onFetch,\n  onCreate,\n  onDelete,\n}: {\n  factors?: MfaEnrollment[];\n  onFetch: () => Promise<MfaEnrollment[]>;\n  onCreate: (factor: string) => Promise<{ ticket_url: string }>;\n  onDelete: (enrollmentId: string) => Promise<void>;\n}) {\n  const [currentFactors, setCurrentFactors] = useState(factors || []);\n  const [isEnrolling, setIsEnrolling] = useState<string | null>(null);\n  const [isRemovingEnrollment, setIsRemovingEnrollment] = useState<\n    string | null\n  >(null);\n\n  const handleCreateEnrollment = (factor: string) => async () => {\n    setIsEnrolling(factor);\n    const { ticket_url } = await onCreate(factor);\n\n    const enrollmentPopupWindow = openPopupWindow({\n      url: ticket_url,\n      title: \"\",\n      width: 600,\n      height: 800,\n      scrollbars: true,\n      focus: true,\n    });\n\n    const timer = setInterval(async () => {\n      if (enrollmentPopupWindow && enrollmentPopupWindow.closed) {\n        setIsEnrolling(null);\n        clearInterval(timer);\n        setCurrentFactors(await onFetch());\n      }\n    }, 0);\n  };\n\n  const handleRemoveEnrollment = (enrollmentId: string) => async () => {\n    setIsRemovingEnrollment(enrollmentId);\n    await onDelete(enrollmentId);\n    setCurrentFactors(await onFetch());\n    setIsRemovingEnrollment(enrollmentId);\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!factors) {\n        setCurrentFactors(await onFetch());\n      }\n    })();\n  }, [factors, onFetch]);\n\n  return (\n    <>\n      {currentFactors.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-normal\">\n              Multi-Factor Authentication\n            </CardTitle>\n            <CardDescription></CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"grid gap-6\">\n            {currentFactors\n              .filter((factor: any) => factor.enabled)\n              .map((factor: any, idx: number) => {\n                const meta = factorsMeta[factor.name];\n\n                return (\n                  <>\n                    {idx > 0 && <Separator />}\n                    <div\n                      key={factor.name}\n                      className=\"flex items-center justify-between space-x-2\"\n                    >\n                      <Label\n                        htmlFor=\"performance\"\n                        className=\"flex flex-col space-y-1\"\n                      >\n                        <span>\n                          {meta.title}\n                          {factor.enrollmentId && (\n                            <Badge\n                              variant=\"default\"\n                              className=\"h-fit bg-green-300 text-black ml-3 font-light hover:bg-green-300\"\n                            >\n                              Enrolled\n                            </Badge>\n                          )}\n                        </span>\n                        <p className=\"font-normal leading-snug text-muted-foreground max-w-fit\">\n                          {meta.description}\n                        </p>\n                      </Label>\n                      <div className=\"flex space-x-24 items-center justify-end min-w-72\">\n                        {factor.enrollmentId ? (\n                          <Button\n                            className=\"h-fit\"\n                            variant=\"outline\"\n                            onClick={handleRemoveEnrollment(\n                              factor.enrollmentId\n                            )}\n                            disabled={\n                              isRemovingEnrollment === factor.enrollmentId\n                            }\n                          >\n                            {isRemovingEnrollment === factor.enrollmentId && (\n                              <Spinner />\n                            )}\n                            Remove\n                          </Button>\n                        ) : (\n                          <Button\n                            className=\"h-fit\"\n                            variant=\"default\"\n                            onClick={handleCreateEnrollment(factor.name)}\n                            disabled={isEnrolling === factor.name}\n                          >\n                            {isEnrolling === factor.name && <Spinner />}\n                            Enroll\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </>\n                );\n              })}\n          </CardContent>\n        </Card>\n      )}\n    </>\n  );\n}\n"
};