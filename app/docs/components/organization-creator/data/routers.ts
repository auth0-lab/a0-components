export const componentRoutes = [
  {
    "name": "Organizations router",
    "description": "The route can be used to create an organization.",
    "code": "import { ManagementClient, PostOrganizationsRequest } from \"auth0\";\nimport { NextResponse } from \"next/server\";\n\nimport { getSession, withApiAuthRequired } from \"@auth0/nextjs-auth0\";\n\nconst client = new ManagementClient({\n  domain: new URL(process.env.AUTH0_ISSUER_BASE_URL!).host,\n  clientId: process.env.AUTH0_CLIENT_ID_MGMT!,\n  clientSecret: process.env.AUTH0_CLIENT_SECRET_MGMT!,\n});\n\ntype HandleOrganizationCreationParams = Pick<\n  PostOrganizationsRequest,\n  \"enabled_connections\"\n>;\n\n/**\n * @example\n *\n * export const POST = handleOrganizationCreation({\n *   enabled_connections: [{\n *     connection_id: process.env.ORGANIZATIONS_ENABLED_CONNECTION!,\n *     assign_membership_on_login: false,\n *    }]\n *  });\n */\n// TODO: better error handling\nexport function handleOrganizationCreation(\n  params?: HandleOrganizationCreationParams\n) {\n  return withApiAuthRequired(\n    async (request: Request): Promise<NextResponse> => {\n      const session = await getSession();\n      const userId = session?.user.sub;\n      const body: PostOrganizationsRequest = await request.json();\n      const postOrganization: PostOrganizationsRequest = {\n        name: body.name,\n      };\n\n      if (params && params.enabled_connections) {\n        postOrganization.enabled_connections = params.enabled_connections;\n      }\n\n      // Create organization\n      const { data: organization } = await client.organizations.create(\n        postOrganization\n      );\n\n      // Add current user to new organization\n      await client.organizations.addMembers(\n        { id: organization.id },\n        { members: [userId] }\n      );\n\n      return NextResponse.json({\n        id: organization.id,\n        name: organization.name,\n        display_name: organization.display_name,\n      });\n    }\n  );\n}\n"
  }
];