export const componentCode = {
  "code": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm, UseFormReturn } from \"react-hook-form\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nexport type OrganizationCreationProps = {\n  name: string;\n  display_name?: string;\n  branding?: {\n    logo_url?: string;\n    colors?: {\n      primary: string;\n      page_background: string;\n    };\n  };\n  metadata?: {\n    [key: string]: any;\n  };\n  enabled_connections?: Array<{\n    connection_id: string;\n    assign_membership_on_login?: boolean;\n    show_as_button?: boolean;\n  }>;\n  id: string;\n};\n\ntype OrganizationCreateProps = {\n  customFields?: any[];\n  schema?: any;\n  defaultValues?: any;\n  onCreate?: (organization: OrganizationCreationProps) => Promise<void>;\n};\n\ntype BaseFormProps = {\n  onSubmit: (values: z.infer<typeof formSchemaBase>) => void;\n  form: UseFormReturn<z.infer<typeof formSchemaBase>>;\n};\n\ntype OrganizationFormProps = BaseFormProps & {\n  children: React.ReactNode;\n  customFields?: any[];\n};\n\ntype PageModeProps = BaseFormProps & {\n  working: boolean;\n  customFields?: any[];\n};\n\nconst formSchemaBase = z.object({\n  organization_name: z\n    .string()\n    .min(3, {\n      message: \"Organization name must be at least 2 characters.\",\n    })\n    .max(50, {\n      message: \"Organization name must be at most 50 characters.\",\n    })\n    .regex(/^(?:(?!org_))[a-z0-9]([a-z0-9\\-_]*[a-z0-9])?$/, {\n      message: \"Invalid organization name.\",\n    }),\n});\n\nfunction Spinner() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"17\"\n      height=\"17\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"mr-2 animate-spin\"\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\"></path>\n    </svg>\n  );\n}\n\nfunction OrganizationForm({\n  form,\n  children,\n  customFields,\n  onSubmit,\n}: OrganizationFormProps) {\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"organization_name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Organization Name</FormLabel>\n              <FormControl>\n                <Input autoFocus {...field} />\n              </FormControl>\n              <FormDescription>\n                Choose a unique name for your organization.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        {customFields &&\n          customFields.map((Field) => <Field key={typeof Field} form={form} />)}\n\n        {children}\n      </form>\n    </Form>\n  );\n}\n\nfunction PageMode({ form, working, customFields, onSubmit }: PageModeProps) {\n  return (\n    <div className=\"max-w-screen-lg mx-auto gap-5 md:gap-5 lg:gap-5 justify-center p-4 py-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Create Organization</CardTitle>\n          <CardDescription>\n            Creating a new organization will allow you to manage a separate\n            group with unique settings and resources.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <OrganizationForm\n            form={form}\n            onSubmit={onSubmit}\n            customFields={customFields}\n          >\n            <div className=\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                disabled={working}\n                className=\"disabled:opacity-50\"\n              >\n                Cancel\n              </Button>\n\n              <Button\n                type=\"submit\"\n                disabled={working}\n                className=\"disabled:opacity-50\"\n              >\n                {working && <Spinner />}\n                Create\n              </Button>\n            </div>\n          </OrganizationForm>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function OrganizationCreate({\n  customFields,\n  defaultValues,\n  schema,\n  onCreate,\n}: OrganizationCreateProps) {\n  const [working, setWorking] = React.useState<boolean>(false);\n  let formSchema: any = formSchemaBase;\n\n  if (schema) {\n    formSchema = formSchemaBase.and(schema);\n  }\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      organization_name: \"\",\n      ...defaultValues,\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setWorking(true);\n\n    // TODO: better handling errors.\n    try {\n      if (typeof onCreate === \"function\") {\n        await onCreate(values);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    setWorking(false);\n  }\n\n  return (\n    <PageMode\n      working={working}\n      form={form}\n      onSubmit={onSubmit}\n      customFields={customFields}\n    />\n  );\n}\n"
};